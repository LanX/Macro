;;; Automatically generated on Fri Mar 21 14:56:17 2014
;;; Invoked by lanx@nc10-ubuntu using 23.1.50.1
(setq-default session-file-alist '(("~/perl/talks/ExtendingSyntax/modules/Macro/lib/Macro.pm" 3077 3286 1 nil nil 3251 (overwrite-mode)) ("~/perl/talks/ExtendingSyntax/modules/Macro/t/15.closed_over.t" 924 411 1 nil nil 908 (overwrite-mode)) ("~/perl/talks/ExtendingSyntax/modules/Macro/t/12.deparse_coderef.t" 236 317 1 nil nil 236 (overwrite-mode)) ("~/perl/talks/ExtendingSyntax/modules/Macro/t/11.def_macro.t" 318 nil 1 nil nil 44 (overwrite-mode)) ("~/perl/talks/ExtendingSyntax/modules/Macro/t/10.is_macro.t" 52 nil 1 nil nil 52 (overwrite-mode)) ("~/perl/talks/ExtendingSyntax/modules/Macro/t/pod.t" 9 9 1 nil nil 9 (overwrite-mode)) ("~/.emacs.d/elisp/init.el" 323 381 1 nil nil 323 (overwrite-mode)) ("~/.emacs.d/elisp/session" 1 nil 1 nil nil 1 (overwrite-mode))))
(setq-default file-name-history '("~/perl/talks/ExtendingSyntax/modules/Macro/t/11.def_macro.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/10.is_macro.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/15.closed_over.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/14.expand_sub.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/13.expand_coderef.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/expand_coderef.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/12.deparse_coderef.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/" "~/perl/talks/ExtendingSyntax/modules/Macro/t/closed_over.t" "/tmp/pod.t.ps" "~/org/todo.org" "~/perl/talks/ExtendingSyntax/concept.org" "~/perl/IPL/poset.pl" "~/bin/prove_pm" "~/perl/talks/ExtendingSyntax/modules/Macro/t/deparse_coderef.t" "~/perl/talks/ExtendingSyntax/modules/B/Macro.pm" "~/perl/talks/ExtendingSyntax/modules/Macro/t/00.load.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/pod.t" "~/perl/talks/ExtendingSyntax/modules/macro.pl" "~/perl/talks/ExtendingSyntax/modules/Macro/t/pod-coverage.t" "~/perl/talks/ExtendingSyntax/modules/Macro/t/expand_sub.t" "~/perl/talks/ExtendingSyntax/modules/Macro/lib/Macro.pm" "/home/lanx/B/PL/PM/uni_attr.pl"))
(setq-default search-ring '("body2coderef" "_set_closed_over" "done" "end_" "explain" "is_" "expand_coderef" "subname" "$code" "fail" "$h_closed_over" "macro" "set_closure" "_closed_over" "padwa" "expand_cod"))
(setq-default regexp-search-ring '("#.*RL" "\\w<" "^$" "commen." "ä|ö|ü" "[^a-zA-Z_ #*{}()+-:]" "[^a-zA-Z_ #*{}()+-]:" "[^a-zA-Z_ #*{}()+-]" "[^a-zA-Z_ #*{}()]" "[^a-zA-Z_]" "^[^	]+	" "^<" "^if" "
\\\\s*" "
\\s*" "(2008)"))
(setq-default Info-search-history '("desk"))
(setq-default buffer-name-history '("15.closed_over.t" "13.expand_coderef.t" "12.deparse_coderef.t" "lib/Macro.pm" "closed_over.t" "scrap.pl" "session" "elisp/init.el"))
(setq-default command-history '((query-replace "$code" "$c_new" nil (if ... ...) (if ... ...)) (query-replace "$subref" "$c_old" nil (if ... ...) (if ... ...)) (switch-to-buffer "15.closed_over.t") (switch-to-buffer "13.expand_coderef.t") (switch-to-buffer "12.deparse_coderef.t") (indent-region (region-beginning) (region-end) nil) (switch-to-buffer "lib/Macro.pm") (find-file "~/perl/talks/ExtendingSyntax/modules/Macro/t/11.def_macro.t" t) (find-file "~/perl/talks/ExtendingSyntax/modules/Macro/t/10.is_macro.t" t) (dired-do-rename nil) (dired-sort-toggle-or-edit nil) (find-file "~/perl/talks/ExtendingSyntax/modules/Macro/t/" t) (switch-to-buffer-other-window "closed_over.t") (switch-to-buffer "closed_over.t")))
(setq-default extended-command-history '("switch-to-buffer-other-window" "indent-region" "dired-do-rename" "dired-sort-toggle-or-edit" "ffap" "desktop-change-dir" "customize-group" "set-variable" "desktop-save-in-desktop-dir"))
(setq-default kmacro-ring '(([24 19 134217848 115 119 105 tab 119 tab return 99 108 111 115 101 100 95 tab return f5 return] 0 "%d") ([24 19 24 98 99 108 111 tab return] 0 "%d")))
(setq-default minibuffer-history '("Test::More" "cperl-ps-print" "desktop" "Saving Emacs Sessions" "Emacs" "desktop-dirname" "desktop-save-in-desktop-dir"))
(setq-default query-replace-history '("$c_new" "$code" "$c_old" "$subref"))
(setq-default yes-or-no-p-history '("yes"))
