
=head1 NAME

Macro - Expanding code with LISP like macros


=head1 VERSION

This document describes Macro version 0.0.6-03


=head1 SYNOPSIS

    use Macro;

=for author_to_fill_in
    Brief code example(s) here showing commonest usage(s).
    This section will be as far as many users bother reading
    so make it as educational and exeplary as possible.

=head1 DESCRIPTION

=for author_to_fill_in
    Write a full description of the module and its features here.
    Use subsections (=head2, =head3) as appropriate.


=head1 INTERFACE


=for author_to_fill_in
    Write a separate section listing the public components of the modules
    interface. These normally consist of either subroutines that may be
    exported, or methods that may be called on objects belonging to the
    classes provided by the module.



=head2 expand2text CODEREF  

=> expanded CODE

Expands macros while deparsing CODEREF


CAUTION: Only one level expansion implemented yet.

Arguments tunneld to deparse2text(@_)

=for TODO
 ** ??? rename?
  -  expand_sub2source
  -  expand_source OBJ
  -  expand_deparse
   OBJ = coderef/subname
         sub_body?
         glob? *func
  - expand2txt sub, exp-level
  - deparse    sub, exp-level
        
=cut


=head2 deparse2text

=> deparsed CODE

Return deparsed code for coderef w/o expansion

=cut


=head2 expand SUB

=> new CODEREF

Evals text expansion of SUB = [CODEREF|SUBNAME]

=head3 expand SUBNAME

Side effect: Installs new CODEREF into SUBNAME's package.

(pass coderef =\&SUBNAME= otherwise)

SUBNAME is a string like "Package::func" or "func".

If not fully qualified current package of caller is chosen

=head3 expand CODEREF

No side effect!




=for TODO
* Glob passing?
 - is package known?
* ??? rename?
-  expand sub, exp-level, %opt


=cut


=head2 body2coderef (BODYTEXT, 'closed_over' => href, 'package' => string)

Evals body-code within context of package and closed over
lexicals.

Returns coderef.

* ??? rename?
 - eval_body 
=cut


=head1 Macro Management


Macros are just ordenary subroutines and follow the same call-syntax.

But at expansion time they need to be distiguished from non-macros.

The following routines are an abstraction layer to facilitate
experimenting different approaches.

Currently we just bless their coderef into a special package (ATM "Macro").

(This is likely to change in the future, never rely on this)

NB: Exported macros keep being macros.

TODO: enter explanation from Perl6

=cut


=head2 mark_macro CODEREF

=> blessed CODEREF

Marks coderef as macro.

=cut


=head2 is_macro CODEREF

Is true (returns CODEREF) if pointing to a macro.

Otherwise false.

=cut


=head2 ref_macro SUBNAME, CURRENT_PACKAGE

Return reference of named macro.

Return undef if not a macro

$current_package is ignored if $name is fully quallified

=cut


=head2 _fullname SUBNAME, PCKG

=> full SUBNAME

Returns "PCKG::NAME" if NAME not already fully qualified

=cut


=head2 def_macro NAME, BLOCK

Installs C<sub NAME {BLOCK}> and marks it as macro.

NAME defaults to local package if unqualified.

=cut


=head1 Hygienic Macros

The full expansion (Macros and Template) should under no cases
introduce new symbols conflicting with symbols within the scope of the
old sub to be expanded.

Symbols := lexical Variables, Labels and other identifiers

Various techniques are know in languages like LISP, such as
- Obfuscation,
- GenSym,
- using reserved namespaces,
- Convention: prepending full module-name to symbol

For details sie [wp://Macro Hygiene] http://en.wikipedia.org/wiki/Hygienic_macro#Strategies_used_in_languages_that_lack_hygienic_macros
 in WP.

    my OLD_closed_over;
    {
	my NEW_closed_over;

	sub NEW_SUB {
	    PreTEMPLATE;
	    OLD_BODY {
		# ... ;
		MACRO();
		# ... ;
	    };
	    PostTEMPLATE;
	}
    }


Since the code of OLD_SUB is unknown to the macro-author, symbol-names
need to be indentified at expansion time to resolve the conflict.

This is done by altering the new symbol names with extra characters.

This is done by replacing a placeholder for each symbol indentifier in
the Source-Templates of Super-Macro and Macros _before_ introducing new code.

This is done by a simple global substitution =s///g= of source_templates pre eval, hence
PLACEHOLDERS MUST be chosen to be unique.

I.e. no substring in other parts of the template (like parts of a
subname) should be placeholder, this module doesn't attempt to parse Perl syntax.

Placeholders should be valid identifiers and well chosen to facilitate
later debugging.

We recommend using upercase letters surounded by one underscore. (???)

=cut


=head1 Handling Closure Variables

Reevaluating deparsed subroutines disconnects closed over
variables from the original scope.

PadWalker is used for retrieving and redirecting those variables.

But this dependency to a non-core XS-module is not very fortunate.

The following subs are a direct wrappers to the original
routines. Like that we facilitate:

  1. A potential future migration to a non-XS solution.

  2. More detailed documentation of manipulating Perl's guts.

=head2 _closed_over


=head2 _set_closed_over


=head2 _peek_sub


=cut


=head1 Attribute Handlers

Syntactic sugar to facilitate definition and expansion of macros.

=cut


=head2 _import_attributes SRC_PKG, DEST_PKG

We try to avoid global pollution of UNIVERSAL with our handlers.

We use a little hack to install them locally into the importing
package.

For a more detailed discussion, see
  L<http://www.perlmonks.org/index.pl?node_id=1036619>

Future: Might be refactored into separate module.

=cut


=head2 Macro

Attribute to mark subs as macros.

  sub bla :Macro { ... }

For details see mark_macro().
=cut


=head1 Debugging Helpers

Little internal helpers for testing, development and debugging.

(Should maybe be refactored into external module)

=head2 say

say for backwards-compatibility.

=cut


=head2 dbout

debug output, controled by global $DEBUG

=cut






=head1 DIAGNOSTICS

=for author_to_fill_in
    List every single error and warning message that the module can
    generate (even the ones that will ''never happen''), with a full
    explanation of each problem, one or more likely causes, and any
    suggested remedies.

=over

=item C<< Error message here, perhaps with %s placeholders >>

[Description of error here]

=item C<< Another error message here >>

[Description of error here]

[Et cetera, et cetera]

=back


=head1 CONFIGURATION AND ENVIRONMENT

=for author_to_fill_in
    A full explanation of any configuration system(s) used by the
    module, including the names and locations of any configuration
    files, and the meaning of any environment variables or properties
    that can be set. These descriptions must also include details of any
    configuration language used.

Macro requires no configuration files or environment variables.


=head1 DEPENDENCIES

=for author_to_fill_in
    A list of all the other modules that this module relies upon,
    including any restrictions on versions, and an indication whether
    the module is part of the standard Perl distribution, part of the
    module's distribution, or must be installed separately. ]


=head2 C<B::Deparse>

Belongs to core distribution since 5.05 (?)

=head2 C<Attribute::Handlers>

Belongs to core distribution since ???.

=head2 C<PadWalker>.

Needed to handle variables closed over expanded subs. 

In other cases not needed, might become optional.  


=head1 INCOMPATIBILITIES

=for author_to_fill_in
    A list of any modules that this module cannot be used in conjunction
    with. This may be due to name conflicts in the interface, or
    competition for system or program resources, or due to internal
    limitations of Perl (for example, many modules that use source code
    filters are mutually incompatible).

None reported.


=head1 BUGS AND LIMITATIONS

=for author_to_fill_in
    A list of known problems with the module, together with some
    indication Whether they are likely to be fixed in an upcoming
    release. Also a list of restrictions on the features the module
    does provide: data types that cannot be handled, performance issues
    and the circumstances in which they may arise, practical
    limitations on the size of data sets, special cases that are not
    (yet) handled, etc.

=head2 Expansion level

Nested macros are not yet handled, expansion stops after one level. 
This will be addressed in future versions. 

Please report any bugs or feature requests to
C<bug-Macro@rt.cpan.org>, or through the web interface at
L<http://rt.cpan.org>.


=head1 AUTHOR

Rolf Michael Langsdorf  C<< lanx@cpan.org >>


=head1 LICENSE AND COPYRIGHT

Copyright (c) 2014, Rolf Michael Langsdorf C<< lanx@cpan.org >>.
All rights reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See C<perldoc perlartistic>.


=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE ''AS IS'' WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

